class Solution {

     

	// public boolean valid(StringBuilder s, int mid, int lmid) {

	// 	if (mid <0 && lmid > s.length() ) {
	// 		return false;
	// 	}
	// 	if(mid >=0) {
	// 		StringBuilder temp = new StringBuilder(sb);
	// 		temp.deleteCharAt(mid);
	// 		if(temp.toString().equals(temp.reverse().toString())) {
	// 			return true;
	// 		}
	// 	}
		
	// 	if(lmid < sb.length()) {
	// 		StringBuilder temp1 = new StringBuilder(sb);
	// 		temp1.deleteCharAt(lmid);
	// 		if(temp1.toString().equals(temp1.reverse().toString())) {
	// 			return true;
	// 		}
	// 	}
		
	// 	return valid(sb,  mid-1, lmid+1);

	// }


    
    public boolean validPalindrome(String s) {
    
        int i =0, j = s.length()-1;
        while(i < j){
            if( s.charAt(i) != s.charAt(j)){
                
                if( check(s, i+1, j)){
                    return true;
                }
                if(  check(s, i, j-1)){
                    return true;
                }

                return false;
            }
            i++;
            j--;
        }
      return true;
    }

    boolean check (String s , int i , int j ){
        while(i<=j){
            if(s.charAt(i)!=s.charAt(j)){
                return false;
            }
            i++;
            j--;
        }

        return true;
    }
}
