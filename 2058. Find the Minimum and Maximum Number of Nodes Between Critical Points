/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int[] nodesBetweenCriticalPoints(ListNode head) {
        int ans[]=new int[2];
        ans[0]=-1;
        ans[1]=-1;
        List<Integer> l=new ArrayList<>();
        List<Integer> in=new ArrayList<>();
        while(head!=null){
            l.add(head.val);
            head=head.next;
        }
        int min=Integer.MAX_VALUE;
        for(int i=1;i<l.size()-1;i++){
            if(l.get(i-1)> l.get(i) && l.get(i) <l.get(i+1)
            || l.get(i-1)<l.get(i) && l.get(i)>l.get(i+1)){
                if(in.size()>0){
                // System.out.print(in.get(in.size()-1)+" ");
                min=Math.min(min,Math.abs((in.get(in.size()-1))-(i+1)));
                }
                in.add(i+1);
            }
        }
        // System.out.println();
        // for(int i : in){
        //     System.out.print(i+" ");
        //  }
        
        if(in.size()>0){
            if(min==Integer.MAX_VALUE){
               ans[0]=-1; 
            }else{
                ans[0]=min;
            }
            
            
            int a=Math.abs(in.get(0)-in.get(in.size()-1));
            if(a==0){
                ans[1]=-1;
            }else{
                ans[1]=a;
            }
        } 
        
        
        return ans;
    }
}
