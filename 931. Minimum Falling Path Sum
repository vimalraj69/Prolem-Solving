class Solution {
    public int minFallingPathSum(int[][] matrix) {
        int n=matrix.length;
        int [][]dp=new int[n][n];
        for(int i=0;i<n;i++){
            Arrays.fill(dp[i],Integer.MAX_VALUE);
        }
        for(int i=0;i<n;i++){
            dp[0][i]=matrix[0][i];
        }
        for(int i=1;i<n;i++){
            for(int j=0;j<n;j++){
                if(j==0){
                    for(int k=j;k<=j+1;k++){
                        dp[i][k]=Math.min(dp[i][k],dp[i-1][j]+matrix[i][k]);
                    }
                }else if(j==n-1){
                    for(int k=j-1;k<=n-1;k++){
                        dp[i][k]=Math.min(dp[i][k],dp[i-1][j]+matrix[i][k]);
                    }
                }else{
                    for(int k=j-1;k<=j+1;k++){
                        dp[i][k]=Math.min(dp[i][k],dp[i-1][j]+matrix[i][k]);
                    }
                }
            }
        }
        int a=Integer.MAX_VALUE;
        for(int i=0;i<n;i++){
          a=Math.min(a,dp[n-1][i]);
        }
        return a;
    }
}
