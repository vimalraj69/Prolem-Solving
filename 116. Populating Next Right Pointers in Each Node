/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/
//iteration 1
//      q=[]
//      q=[1] size 1
//          for loop i =0 to size
//               exit loop
//          add left right 
// iteration 2
//      q=[2,3] size 2
//          loop -1
//              current =q.poll //2
//              current .next = q.peek(); // i =0
            //  add left right // q=[3,4,5]
//          loop -2
//              current = q.poll //2
//              current.nect = q.peek(); // i =1
        //      add left right q=[4,5,6,7]


class Solution {
    public Node connect(Node root) {

        if(root == null){
            return null;
        }

        Queue<Node> q = new LinkedList<>();

        q.add(root);

        while(!q.isEmpty()){
            int size = q.size();

            for(int i =0; i<size; i++){
                Node current = q.poll();

                if(!q.isEmpty() && i !=size -1){
                    current.next = q.peek();
                }

                if(current.left !=null){
                    q.add(current.left);
                }

                if(current.right !=null){
                    q.add(current.right);
                }
            }
        }

        return root;
        
    }
}
