/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private int count = 0;

    public int pathSum(TreeNode root, int targetSum) {
        if (root == null) {
            return 0;
        }

        helper(root, targetSum, 0);
        pathSum(root.left, targetSum);
        pathSum(root.right, targetSum);

        return count;
    }

    private void helper(TreeNode node, int targetSum, int currentSum) {
        if (node == null) {
            return;
        }

        if(currentSum+node.val <=Integer.MAX_VALUE && currentSum+node.val >=Integer.MIN_VALUE/2){
             currentSum += node.val;
        }else{
            return;
        }

        if (currentSum == targetSum) {
            count++;
        }

        helper(node.left, targetSum, currentSum);
        helper(node.right, targetSum, currentSum);
    }
}
