/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        if(root == null){
            return new ArrayList();
        }
        List<List<Integer>> list = bfs(root);

        for(int i =0; i<list.size(); i++){
            if(i % 2 !=0){
                Collections.reverse(list.get(i));
            }
        }
        return list;
    }

    List<List<Integer>> bfs (TreeNode root){
        Queue <TreeNode> q = new LinkedList<>();

        q.add(root);

        List<List<Integer>> l = new ArrayList<>();

        while(!q.isEmpty()){
            int size = q.size();
            List<Integer> subList = new ArrayList<>();
            for(int i =0; i<size; i++){
                TreeNode current = q.poll();
                subList.add(current.val);

                if(current.left !=null){
                    q.add(current.left);
                }

                if(current.right !=null){
                    q.add(current.right);
                }
            }
            l.add(subList);
        }
        return l;
    }
}
